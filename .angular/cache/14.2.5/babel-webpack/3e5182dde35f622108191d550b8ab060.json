{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component } from '@angular/core';\nimport { MqttRequest } from '../utils/services/mqtt-request.component';\nimport { AuthService } from '../welcome/login/auth.service';\nlet DashboardComponent = class DashboardComponent {\n  authService;\n  eventMqtt;\n  filter = false;\n  dispensers = [];\n  mediaSetor = 0;\n  lowDispensers = 0;\n  usedTotal = 0;\n  locaisObj = [];\n  locais = [];\n  subscription;\n  mediaColor = 'red';\n  gramasAlcool = 0;\n  oct_value = '';\n\n  constructor(authService, eventMqtt) {\n    this.authService = authService;\n    this.eventMqtt = eventMqtt;\n  }\n\n  ngOnInit() {\n    this.authService.hideBar(false);\n    this.subscribeToTopic();\n  }\n\n  openFilter() {\n    this.filter = !this.filter;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  subscribeToTopic() {\n    this.subscription = this.eventMqtt.topic('').subscribe(data => {\n      let local = data.topic.split(\"/\")[2];\n      let item = JSON.parse(data.payload.toString());\n      let found = this.dispensers.some(el => el.id === item.id);\n      item.local = local;\n\n      if (found) {\n        let index = this.dispensers.findIndex(el => el.id === item.id);\n        this.dispensers[index] = item;\n      } else {\n        this.dispensers.push(item);\n      }\n\n      this.lowDispensers = 0;\n      this.usedTotal = 0;\n      let grafOne = {\n        local: undefined,\n        totalUsed: undefined,\n        percent: 0\n      };\n      let x = 0;\n      this.dispensers.forEach(element => {\n        if (element.fluidLevel < 25) {\n          this.lowDispensers = this.lowDispensers + 1;\n        }\n\n        this.usedTotal = this.usedTotal + element.usedCount;\n      });\n      this.dispensers.forEach(element => {\n        if (this.locais.indexOf(element.local) == -1) {\n          this.locais.push(element.local);\n          grafOne.local = element.local;\n          grafOne.totalUsed = element.usedCount;\n          grafOne.percent = Math.trunc(100 * grafOne.totalUsed / this.usedTotal);\n          this.locaisObj.push(grafOne);\n          this.locaisObj.sort((a, b) => b.totalUsed - a.totalUsed);\n        } else {\n          let index = this.locaisObj.findIndex(el => el.local === element.local);\n          let result = this.dispensers.filter(value => value.local === element.local);\n          x = 0;\n          result.forEach(filteredEl => {\n            x = x + filteredEl.usedCount;\n          });\n          this.locaisObj[index].totalUsed = x;\n          this.locaisObj[index].percent = Math.trunc(100 * this.locaisObj[index].totalUsed / this.usedTotal);\n          this.locaisObj.sort((a, b) => b.totalUsed - a.totalUsed);\n          this.mediaSetor = Math.trunc(this.usedTotal / this.locais.length);\n\n          if (this.mediaSetor > 70) {\n            this.mediaColor = 'green';\n          } else if (this.mediaSetor > 50) {\n            this.mediaColor = '#a1a111';\n          } else {\n            this.mediaColor = 'red';\n          }\n\n          this.gramasAlcool = this.usedTotal * 0.86;\n          this.gramasAlcool = parseInt(this.gramasAlcool.toFixed(2));\n          this.oct_value = this.usedTotal.toString();\n          console.log(this.oct_value);\n        }\n      });\n    });\n  }\n\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n}), __metadata(\"design:paramtypes\", [AuthService, MqttRequest])], DashboardComponent);\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module"}